#!/usr/bin/env python

import os
import os.path
import re

Import("env")
Import("env_modules")

env_reality_merge = env_modules.Clone()

module_path = Dir(".").srcnode().abspath
thirdparty_dir = os.path.join(module_path, "thirdparty")
usdj_am_dir = os.path.join(thirdparty_dir, "cavi_usdj-am")

# Delegate the building of the third-party library to CMake.
build_dir = os.path.join(
    usdj_am_dir,
    "build",
)
source_dir = os.path.join(usdj_am_dir, "src")
library_name = "cavi_usdj-am"

if env["platform"] == "windows" and env.msvc:
    # An implib is named like a static library.
    fixes = (env.subst("$LIBPREFIX"), env.subst("$LIBSUFFIX"))
else:
    fixes = (env.subst("$SHLIBPREFIX"), env.subst("$SHLIBSUFFIX"))
library_basename = fixes[0] + library_name + fixes[-1]
library_filename = os.path.join(build_dir, library_basename)
env_reality_merge.Prepend(
    CPPPATH=[
        os.path.join(usdj_am_dir, "include"),
        os.path.join(thirdparty_dir, "automerge", "rust", "automerge-c", "include"),
        os.path.join(build_dir, "include"),
        os.path.join(build_dir, "automerge-c", "include"),
    ],
)
cmake_build_type = {
    "editor": "RelWithDebInfo",
    "template_debug": "Debug",
    "template_release": "Release",
}[env["target"]]
build_shared_libs = False
cmake_msvc_runtime_library_mappings = {
    "/MT": "MultiThreaded",
    "/MD": "MultiThreadedDLL",
    "/MTd": "MultiThreadedDebug",
    "/MDd": "MultiThreadedDebugDLL",
}
msvc_runtime_flag = re.search("/M[TD]d?", env.subst("$CCFLAGS"))
cmake_msvc_runtime_library = cmake_msvc_runtime_library_mappings.get(
    msvc_runtime_flag.group(0) if msvc_runtime_flag else None, ""
)

cmake_command = '"{}"'.format(os.environ.get("CMAKE_COMMAND", "cmake"))
libraries = [library_filename]
env_reality_merge.Command(
    target=libraries,
    source=os.path.join(usdj_am_dir, "CMakeLists.txt"),
    action=[
        # fmt: off
        # Make the out-of-source build directory for CMake in order to dictate
        # the output directory for its build products.
        Mkdir(build_dir),
        # Generate the project's build system, overriding the libraries names
        # with the ones that SCons expects to find.
        (cmake_command + " -B " + build_dir + " -S " + usdj_am_dir + " -G Ninja" +
            # " -DCMAKE_BUILD_TYPE=" + cmake_build_type +
            " -DCMAKE_BUILD_TYPE=Debug" +
            " -DCMAKE_MSVC_RUNTIME_LIBRARY=" + cmake_msvc_runtime_library +
            " -DLIBRARY_NAME=" + library_name +
            " -DSTATIC_LIBRARY_PREFIX=" + env.subst("$LIBPREFIX") +
            " -DSTATIC_LIBRARY_SUFFIX=" + env.subst("$LIBSUFFIX") +
            " -DSHARED_LIBRARY_PREFIX=" + env.subst("$SHLIBPREFIX") +
            " -DSHARED_LIBRARY_SUFFIX=" + env.subst("$SHLIBSUFFIX") +
            " -DBUILD_SHARED_LIBS=" + ("ON" if build_shared_libs else "OFF") +
            " -DBUILD_TESTING=OFF" + " -DCMAKE_VERBOSE_MAKEFILE=ON" + " --fresh"),
        # Build the project's library target.
        cmake_command + " --build " + build_dir + " --target " + library_name + " --clean-first",
        # fmt: on
    ],
)

env.Append(
    LIBPATH=[build_dir],
    LIBS=[library_name],
)

if env.msvc:
    lib_suffix = Environment()["LIBSUFFIX"]
    env.Append(
        LINKFLAGS=[
            "ntdll" + lib_suffix,
            "Rpcrt4" + lib_suffix,
            "userenv" + lib_suffix,
        ],
    )

# Godot source files
module_obj = []

env_reality_merge.add_source_files(
    module_obj,
    [
        "automerge_resource.cpp",
        "register_types.cpp",
        "usdj_basis.cpp",
        "usdj_body_updater.cpp",
        "usdj_color.cpp",
        "usdj_color_extractor.cpp",
        "usdj_box_size_extractor.cpp",
        "usdj_geometry_extractor.cpp",
        "usdj_mediator.cpp",
        "usdj_projection.cpp",
        "usdj_quaternion.cpp",
        "usdj_real.cpp",
        "usdj_reals.cpp",
        "usdj_static_body_3d.cpp",
        "usdj_transform_3d_extractor.cpp",
        "usdj_value.cpp",
        "usdj_velocity_extractor.cpp",
        "uuid.cpp",
    ],
)
env.modules_sources += module_obj

# Force rebuilding of the module files when the third-party libraries are updated.
env.Depends(module_obj, libraries)
